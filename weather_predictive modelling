import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import mean_squared_error, accuracy_score
from sklearn.preprocessing import LabelEncoder
import joblib

# Load the dataset
df = pd.read_csv('file.csv', encoding='ascii')

# Drop 'Date/Time' column since it's not directly usable
df = df.drop(columns=['Date/Time'])

# Drop rows with missing values (you can use imputation if preferred)
df = df.dropna()

# Encode categorical features (specifically 'Weather')
label_encoders = {}
for column in df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])
    label_encoders[column] = le

    # Define features and targets
X = df.drop(columns=['Temp_C', 'Weather'])  # Features

y_regression = df['Temp_C']     # Target for regression
y_classification = df['Weather']  # Target for classification

# Split data for regression
X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(
    X, y_regression, test_size=0.2, random_state=42)

# Split data for classification
X_train_cls, X_test_cls, y_train_cls, y_test_cls = train_test_split(
    X, y_classification, test_size=0.2, random_state=42)

# Train regression model
regressor = LinearRegression()
regressor.fit(X_train_reg, y_train_reg)

# Predict and evaluate regression
y_pred_reg = regressor.predict(X_test_reg)
regression_mse = mean_squared_error(y_test_reg, y_pred_reg)

# Train classification model
classifier = RandomForestClassifier(random_state=42)
classifier.fit(X_train_cls, y_train_cls)